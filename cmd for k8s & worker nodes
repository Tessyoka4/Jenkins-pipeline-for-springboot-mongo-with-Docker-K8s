# Requirements
Minimal install Ubuntu 22.04/ Minimum 2GB RAM or more/ Minimum 2 CPU cores / or 2 vCPU/ 20 GB free disk space on /var or more/ Sudo user with admin rights

# Lab Setup
Master Node: k8smaster/ First Worker Node: k8sworker1/ Second Worker Node: k8sworker2

# Step 1) Set hostname and add entries in the hosts file (ssh into master node and set hostname using hostnamectl command)
sudo hostnamectl set-hostname "k8smaster"
exec bash

# On the worker nodes, run
sudo hostnamectl set-hostname "k8sworker1"   // 1st worker node
sudo hostnamectl set-hostname "k8sworker2"   // 2nd worker node
exec bash

Add the following entries in /etc/hosts file on each node

IP k8smaster
IP k8sworker1

# Step 2) Disable swap & add kernel settings
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Load the following kernel modules on all the nodes
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

# Set the following Kernel parameters for Kubernetes
sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF 

# Reload the above changes, run
sudo sysctl --system

# Step 3) Install containerd run time (using containerd run time for our Kubernetes cluster); install dependencies
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Enable docker repository
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Now, run following apt command to install containerd
sudo apt update
sudo apt install -y containerd.io

# Configure containerd so that it starts using systemd as cgroup
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart and enable containerd service
sudo systemctl restart containerd
sudo systemctl enable containerd

# Step 4) Add apt repository for Kubernetes
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

# Step 5) Install Kubernetes components Kubectl, kubeadm & kubelet on all nodes
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# Step 6) Initialize Kubernetes cluster with Kubeadm command (on master node only)
sudo kubeadm init --control-plane-endpoint=k8smaster

# To start interacting with cluster, run following commands from the master node,
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Run following kubectl commands to view cluster and node status
kubectl cluster-info
kubectl get nodes

# Join both the worker nodes to the cluster, command is the output of kubeadm init on Master node, copy & paste on the worker nodes,
sudo kubeadm join k8smaster:6443 --token vt4ua6.wcma2y8pl4menxh2 \
   --discovery-token-ca-cert-hash sha256:0494aa7fc6ced8f8e7b20137ec0c5d2699dc5f8e616656932ff9173c94962a36

# Check the nodes status from master node
kubectl get nodes

# Step 6) If status is ‘NotReady’, install CNI (Container Network Interface) or weave network to make it active. On master node
curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
kubectl apply -f calico.yaml

# or apply weaveworks
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

# Verify the status of pods in kube-system namespace & node status to see if active
kubectl get pods -n kube-system
kubectl get nodes

# Step 7) Test Kubernetes Installation; you can deploy nginx based application and try to access it
kubectl create deployment nginx-app --image=nginx --replicas=2

# Check the status of nginx-app deployment
kubectl get deployment nginx-app

# Expose the deployment as NodePort,
kubectl expose deployment nginx-app --type=NodePort --port=80
service/nginx-app exposed

# Run following commands to view service status
kubectl get svc nginx-app
kubectl describe svc nginx-app

# Use the command below to access nginx based application
curl http://<worker-node-ip-addres>:31246
